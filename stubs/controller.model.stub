<?php

namespace {{ namespace }};

use {{ namespacedModel }};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use {{ rootNamespace }}Http\Controllers\Controller;

class {{ class }} extends Controller
{
    public function index()
    {
        $items = {{ model }}::all();
        return view('content.{{ modelPluralKebab }}.index', compact('items'));
    }

    public function save{{ model }}(Request $request)
    {
        $request->validate([
            {{ validationAttributes }}
        ]);

        $data = $request->all();
        $extraData = [];

        foreach ($data as $key => $value) {
            if (!in_array($key, {{ allowedColumns }})) {
                $extraData[$key] = $value;
                unset($data[$key]);
            }
        }

        if ($request->filled('password')) {
            $data['password'] = Hash::make($request->password);
        }

        if ($request->user_id) {
            $item = {{ model }}::find($request->user_id);
            if (!$request->filled('password')) {
                unset($data['password']);
            }
            $item->update($data);
            $item->extra = array_merge($item->extra ?? [], $extraData);
            $item->save();
            $message = '{{ model }} updated successfully';
        } else {
            $data['password'] = Hash::make($request->password ?? 'default_password');
            $data['extra'] = $extraData;
            {{ model }}::create($data);
            $message = '{{ model }} created successfully';
        }

        return redirect()->route('{{ modelPluralKebab }}.index')->with('success', $message);
    }

    public function delete{{ model }}($id)
    {
        $item = {{ model }}::find($id);
        if ($item) {
            $item->delete();
            return redirect()->route('{{ modelPluralKebab }}.index')->with('success', '{{ model }} deleted successfully');
        }
        return redirect()->route('{{ modelPluralKebab }}.index')->with('error', '{{ model }} not found');
    }
}
